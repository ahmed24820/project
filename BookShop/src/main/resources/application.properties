spring.datasource.url=jdbc:mysql://localhost:3306/bookshop
spring.datasource.username=root
spring.datasource.password=632004
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform = org.hibernate.dialect.MySQLDialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto = update

# logging

logging.level.org.hibernate=info
logging.level.org.hibernate.SQL=debug


# this is the alternative solution for the lazyload problem the happens when we use fetch lazy in many to one
spring.jackson.serialization.fail-on-empty-beans=false

#
Schedule.value=true

#flyway
spring.flyway.enabled=false
# we can provide a comma-separated list of one or more classpath: or filesystem: locations
spring.flyway.locations=classpath:db/migration,filesystem:/another/migration/directory
#used if database has some already table
spring.flyway.baseline-on-migrate=true


#swagger
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui-custom.html
springdoc.swagger-ui.operationsSorter=method

#springdoc.api-docs.enabled=false
#springdoc.swagger-ui.enabled=false
#if i need to scan a package i can use
#springdoc.packagesToScan=com.package1,com.package2
# path to include
#springdoc.pathsToMatch=/v1,/book/,/author/


application-description=book_shop api
application-version=2.3